#!/bin/sh

#
# Send messages to notifier from the command line via curl.
#
# Includes the ability to request a login token from a notifier and
# save it to ~/.netrc.
#

VERSION="1.2.0"

set -u

usage() {
    cat <<EOF

This script sends a message populated with the specified fields to a
notifier server via curl.

If a server is not specified, the NOTIFIER_SERVER environment variable
is used.

To set up authentication:
${0##*/} -a


To send a message after setting up authentication:
${0##*/} -s SERVER -t TITLE -g GROUP -b BODY -u URL
-p PUSHBULLET_ID -e EXPIRATION

EOF
}

version() {
    echo "Version: $VERSION"
}

message() {
    if [ "$INTERACTIVE" -eq 1 ]; then
        echo "$1" >&2
    else
        logger -t "$1"
    fi
}




authorize() {
    echo "Setting up access credentials."

    read -p "Enter the full URL of your notifier server: " NOTIFIER_URL

    # Remove trailing slash
    NOTIFIER_URL=${NOTIFIER_URL/%\//}

    # Isolate hostname
    NOTIFIER_HOST=${NOTIFIER_URL##*\/\/}
    NOTIFIER_HOST=${NOTIFIER_HOST%%:*}

    read -p "Username: " NOTIFIER_USERNAME

    stty -echo
    read -p "Password: " NOTIFIER_PASSWORD
    stty echo

    echo ""
    echo ""

    RESPONSE=$(curl -s \
                    --write-out ",%{http_code}" \
                    --header "Accept: text/plain" \
                    -d "username=$NOTIFIER_USERNAME" \
                    -d "password=$NOTIFIER_PASSWORD" \
                    -d "label=${0##*/}" \
                    -d "persist=1" \
                    $NOTIFIER_URL/auth)

    RESPONSE_CODE=${RESPONSE##*,}

    if [ "$RESPONSE_CODE" != "200" ]; then
        echo "Could not log in. Server returned $RESPONSE_CODE" >&2
        exit;
    fi

    RESPONSE_USER=$(echo "$RESPONSE" | cut -d "," -f 1)
    RESPONSE_PASS=$(echo "$RESPONSE" | cut -d "," -f 2)

    NETRC=$HOME/.netrc
    if [ -f $NETRC ]; then
        NETRC_BACKUP="$NETRC.backup"
        cp "$NETRC" "$NETRC_BACKUP"
        NETRC_TMP=$NETRC.tmp-${0##*/}
        sed "/$NOTIFIER_HOST/d" $NETRC > $NETRC_TMP
        mv $NETRC_TMP $NETRC
        echo "Copied $NETRC to $NETRC_BACKUP for safe keeping"
    fi

    echo "machine $NOTIFIER_HOST login $RESPONSE_USER password $RESPONSE_PASS" >> $NETRC
    echo "Credentials for $NOTIFIER_HOST have been saved in $NETRC"
}

# Are we running from cron?
if [ -t 0 ]; then
    INTERACTIVE=1
else
    INTERACTIVE=0
fi

OPTIND=1
TITLE=""
GROUP=""
BODY=""
BADGE=""
URL=""
PUSHBULLET_ID=""
LOCAL_ID=""
SERVER=${NOTIFIER_SERVER:-}
ENDPOINT="message"
EXPIRATION=""

while getopts "ahcVp:s:t:g:b:u:l:e:i:" opt; do
    case "$opt" in
        a)
            authorize
            exit
            ;;
        s)
            SERVER="$OPTARG"
            ;;
        t)
            TITLE="$OPTARG"
            ;;
        g)
            GROUP="$OPTARG"
            ;;
        b)
            BODY="$OPTARG"
            ;;
        i)
            BADGE="$OPTARG"
            ;;
        u)
            URL="$OPTARG"
            ;;
        p)
            PUSHBULLET_ID="$OPTARG"
            ;;
        l)
            LOCAL_ID="$OPTARG"
            ;;
        e)
            EXPIRATION="$OPTARG"
            ;;
        c)
            ENDPOINT="$ENDPOINT/clear"
            ;;
        V)
            version
            exit
            ;;
        ?)
            usage  >&2
            exit 2
            ;;
    esac
done

shift "$((OPTIND-1))"

if [ -z "$SERVER" ]; then
    message "ERROR: No server specified."
    message "Run with -a to set up authentication credentials"
    message "Run with -h for usage details"
    exit 2
fi

RETRIES=5
RETRY_SLEEP=60

until [ "$RETRIES" -lt 1 ]; do
    RETRIES=$(( RETRIES - 1 ))
    CURL_OUT=$(curl -vvv --netrc --fail --silent --show-error \
                    --write-out ",%{http_code}" \
                    --retry 10 \
                    --data-urlencode "title=$TITLE" \
                    --data-urlencode "group=$GROUP" \
                    --data-urlencode "body=$BODY" \
                    --data-urlencode "url=$URL"  \
                    --data-urlencode "pushbulletId=$PUSHBULLET_ID" \
                    --data-urlencode "badge=$BADGE" \
                    --data-urlencode "localId=$LOCAL_ID" \
		    --data-urlencode "expiresAt=$EXPIRATION" \
                    "$SERVER/$ENDPOINT" 2>&1 )
    HTTP_CODE=${CURL_OUT##*,}

    if [ "$HTTP_CODE" -eq 204 ]; then
        break;
    elif [ "$RETRIES" -gt 0 ]; then
        message "Request failed. Will try again in $RETRY_SLEEP seconds (retries left: $RETRIES)."
        sleep "$RETRY_SLEEP"
    else
        message "Request failed. Giving up."
    fi
done
